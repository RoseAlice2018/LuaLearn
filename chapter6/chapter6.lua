---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by reebdeve.
--- DateTime: 2022/7/15 22:05
---

print(8*9,9/8)

a = math.sin(3) + math.cos(10)
print(a)
print(os.date())

--- 对序列'a' 中的元素求和
function add(a)
    local sum = 0
    for i = 1 ,#a do
        sum = sum + a[i]
    end
    return 100
end



function incCount()
    n = n or 1
    globalCounter = globalCounter + n
end

s,e  = string.find("hello lua world","lua")
print(s,e)

--- 找到序列中最大元素的位置 同时返回最大值以及该元素的位置
function maximum(a)
    local mi = 1    -- 最大值索引
    local m  = a[mi] -- 最大值
    for  i = 1, #a do
        if a[i] > m then
            mi = i
            m = a[mi]
        end
    end
    return m ,mi
end

print(maximum({8,9,10,1,11}))

function foo0()  end -- 不返回结果
function foo1() return "a"  end -- 返回一个结果
function foo2() return "a","b"   end -- 返回两个结果

print(foo2().."X")

function foo(i)
    if i == 0 then return foo0()
    elseif i ==  1 then return foo1()
    elseif i == 2 then return foo2()
    end
end

function add(...)
    local s = 0
    for _,v in ipairs{...} do
        s = s + v
    end
    return s
end

print(add(3,4,5,6,7))


local a,b = ...

function foo(...)
    local a,b,c = ...
end

function foo1(...)
    print("calling foo:",...)
    return foo(...)
end

function fwrite(fmt,...)
    return io.write(string.format(fmt,...))
end

function nonils(...)
    local arg = table.pack(...)
    for i = 1,arg.n do
        if arg[i] == nil then
            return false
        end
    end
    return true
end

print(nonils(2,3,nil)) --> false
print(nonils(2,3))     --> true
print(nonils())        --> true
print(nonils(nil))     --> false

print(select(1,"a","b","c"))
print(select(2,"a","b","c"))
print(select(3,"a","b","c"))
print(select("#","a","b","c"))


function add(...)
    local s = 0
    for i = 1, select("#",...) do
        s = s + select(i,...)
        print("i = ",i,"S = ",s)
    end
    return s
end

print(add(1,2,3))
print(string.rep("-",20))
print(table.unpack({10,20,30}))
a,b = table.unpack({10,20,30})

print(string.find("hello","ll"))

f = string.find
a = {"hello","ll"}
print(f(table.unpack(a)))

print(table.unpack({"Sun","Mon","Tue","Wed"},2,3))

--- unpack 递归实现
function unpack (t,i,n)
    i = i or 1
    n = n or #t
    if i <= n then
        return t[i],unpack(t,i+1,n)
    end
end


--- 尾调用
function foo(n)
    if n > 0 then
        return foo(n-1)
    end
end











































